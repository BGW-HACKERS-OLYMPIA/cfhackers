buildscript {
    ext {
        springBootVersion = '1.2.4.RELEASE'
		springCFCloudVersion = '1.1.1.RELEASE'
		springSecurityVersion = '4.0.1.RELEASE'
		springVersion = '4.1.6.RELEASE'
		springEurekaVersion = '1.0.3.RELEASE'
    springCloudStarterParentTrain = 'Angel.SR3'
		junitVersion = '4.12'
		jacksonVersion = '2.5.3'
		mysqlVersion = '5.1.35'
		bootstrapVersion = '2.3.2'
    }

    repositories {
        mavenCentral()
    }

    buildscript {
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
            classpath "io.spring.gradle:dependency-management-plugin:0.5.1.RELEASE"   
            classpath group: 'org.cloudfoundry', name: 'cf-gradle-plugin', version: '1.1.1'         
        }
    }
}


// Apply versioning to all projects from versioning script.
allprojects {
	apply from: "$rootDir/gradle/versioning.gradle"
	task hello << {task -> println "I'm $task.project.name" }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
	apply plugin: 'jacoco'

	hello << {println "- here we go for subtask"}
	jacoco {
		toolVersion = "0.7.1.201405082137"
	//	reportsDir = file("$buildDir/customJacocoReportDir")
	}
	jacocoTestReport { group = "Reporting"
		description = "Generate Jacoco coverage reports after running tests."
		additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
		}

	test { finalizedBy jacocoTestReport }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
    }
	dependencies {
		testCompile "junit:junit:$junitVersion"
	}
}

project(':accounts-microservice') {
	apply plugin: 'spring-boot'
    jar {
        baseName = 'accounts'
    }
	description = "Micro-service to deal with accounts and user logins"

    dependencies {
		compile "org.springframework.boot:spring-boot-starter:${springBootVersion}"
		compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
		//compile "org.springframework.security:spring-security-web:$springSecurityVersion"
		compile "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion"
		//compile "org.springframework.security:spring-security-config:$springSecurityVersion"
    compile "org.springframework.cloud:spring-cloud-starter-eureka:${springEurekaVersion}"

		// test packages
		testCompile "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
		testRuntime "com.jayway.jsonpath:json-path"

                // Runtime
		runtime "org.hsqldb:hsqldb"
    }
}

project(':web-microservice') {
	apply plugin: 'spring-boot'

    jar {
        baseName = 'web'
    }
	description = "Web interface to the springboot set of services"
    dependencies {
		//compile project(":springboottrades-common")
		//compile "org.springframework.boot:spring-boot-starter-cloud-connectors:${springBootVersion}"
		compile "org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}"
		compile "org.springframework.boot:spring-boot-starter-security:${springBootVersion}"
    compile "org.springframework.cloud:spring-cloud-starter-eureka:${springEurekaVersion}"
    compile "org.springframework.cloud:spring-cloud-starter-hystrix:${springEurekaVersion}"
    compile "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
    compile "org.springframework.cloud:spring-cloud-netflix-hystrix-dashboard:${springEurekaVersion}"
		compile "org.thymeleaf.extras:thymeleaf-extras-springsecurity4:2.1.2.RELEASE"

		runtime "org.webjars:bootstrap:${bootstrapVersion}"

		testCompile "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
    }
}

project (':registryServer') {
     apply plugin: 'spring-boot'
     jar {
        baseName = 'registry'
     }
     description = "Registry server for micro services"
     springBoot {
        requiresUnpack = ['com.netflix.eureka:eureka-core','com.netflix.eureka:eureka-client']
     }

   apply plugin: "io.spring.dependency-management"

   dependencyManagement {
     imports {
        mavenBom "org.springframework.cloud:spring-cloud-starter-parent:${springCloudStarterParentTrain}"
     }
   }
     dependencies {
         compile "org.springframework.cloud:spring-cloud-netflix-eureka-server:${springEurekaVersion}"
     }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

apply plugin: 'cloudfoundry'

cloudfoundry {
	target = "https://api.run.pivotal.io"
	organization = "cfhack"
	space = "cloud-foundry-hacker"
	username = System.getenv()['CF_USERNAME']
	password = System.getenv()['CF_PASSWD']
	application = "vz-portal"
	file = file("web-microservice/build/libs/web-0.2.jar")
	host = "eureka-server"
	domain = "cfapps.io"
	memory = 512
	uri = "http://vz-portal-${randomWord}.run.pivotal.io"
	instances = 1
			services {
			'eureka-service' {
				label = 'eureka'
				provider = 'User Provided'
				version = 'n/a'
				plan = 'sandbox'
				bind = true
			}
		}
	variants = ['-blue', '-green']
}
